@using System
@using System.Linq
@using Microsoft.AspNetCore.Components
@using MudBlazor
@using TryCostEngine.MAUI.Models
@using TryCostEngine.MAUI.Extensions
@using System.Collections.Generic
@using System.Text.RegularExpressions
@using System.Reflection
@using System.Web
@using Microsoft.Extensions.DependencyInjection
@using System.Globalization
@using CostEngine.Data

@*html head (for server prerendering)*@

<PageTitle>@(GetTitle())</PageTitle>

<HeadContent>
    <meta Name="keywords" Content="@GetKeywords()" />
    @if (!string.IsNullOrEmpty(SubTitle))
    {
        <meta Name="description" Content="@(SubTitle)" />
        <meta Property="og:description" Content="@SubTitle" />
    }
</HeadContent>

@if (SpecialHeaderContent != null)
{
    <div class="docs-page-header  mt-6  mb-6">
        @SpecialHeaderContent
        <DocsRenderBenchmark/>
    </div>
}
else
{
    <div class="docs-page-header mt-6 mb-0">
        <MudText Typo="@Typo.h4">@Title</MudText>
        <MudText>@Description</MudText>
        <DocsRenderBenchmark/>
    </div>
}

@*API ½Úµã*@

@if (!_isApiPage && _componentTypeName != null && !DisableApiHeader)
{
    <DocsPageSection api-link-section>
        <SectionHeader Title="API" />
        <div class="docs-page-apilinks">
            <ul class="my-2">
                <li>
                    <MudLink Href="@_apiLink">
                        <CodeInline>@($"<{_componentTypeName}>")</CodeInline>
                    </MudLink>
                </li>
                @if (_component.ChildTypes != null)
                {
                    @foreach (var childType in _component.ChildTypes)
                    {
                        <li>
                            <MudLink Href="@($"api/{childType.Name.Replace("`1", "").ToLowerInvariant().Replace("mud","")}")" Class="ms-1">
                                - <CodeInline>@($"<{childType.Name.Replace("`1", "")}>")</CodeInline>
                            </MudLink>
                        </li>
                    }
                }
            </ul>
        </div>
    </DocsPageSection>
}


@if (_isApiPage && !string.IsNullOrEmpty(ComponentLink))
{
    <link Rel="canonical" Href="#" />
    <DocsPageSection api-link-section>
        <SectionHeader Title="¸ÅÊö" />
        <div class="docs-page-apilinks">
            <ul class="my-2">
                <li>
                    <MudLink Href="@GetComponentLink()">
                        <CodeInline>@($"{_componentPage}")</CodeInline>
                    </MudLink>
                </li>
            </ul>
        </div>
        <MudText Typo="Typo.h5" Inline="true">
            @(HttpUtility.HtmlDecode(_componentPageDescription))
        </MudText>
    </DocsPageSection>
}

@code {
    //[Inject] public NavigationManager NavigationManager { get; set; }
    [Inject] IMenuService MenuService { get; set; }
    [Parameter] public string Title { get; set; }
    [Parameter] public string SubTitle { get; set; }
    [Parameter] public string Keywords { get; set; }
    [Parameter] public bool DisableApiHeader { get; set; }
    [Parameter] public RenderFragment Description { get; set; }
    [Parameter] public RenderFragment SpecialHeaderContent { get; set; }
    [Parameter] public string ComponentLink { get; set; }
    public Type _componentType;
    public MudComponent _parentComponent;
    public MudComponent _component;
    public string _componentName;
    private string _componentPage;
    private string _componentPageDescription;
    private bool _isApiPage;
    private string _apiLink;
    private string _componentTypeName;


    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        _isApiPage = NavigationManager.Uri.ToString().Contains("/api/");

        _componentName = NavigationManager.Uri.ToString().Split('/', StringSplitOptions.RemoveEmptyEntries).LastOrDefault();

        _componentType = ApiLink.GetTypeFromComponentLink(_componentName);

        _component = MenuService.GetComponent(_componentType);

        _parentComponent = MenuService.GetParent(_componentType);

        _componentTypeName = _componentType?.Name.Replace("`1", "");

        _apiLink = $"api/{_componentName}";

        _componentPage = (_component?.Type == null) ? _parentComponent?.Name : _component?.Name;

        var t = _component?.Type;
        if (t != null)
        {
            string saveTypename = DocStrings.GetSaveTypename(t);
            var doc = DocStrings.GetMemberDescription(saveTypename, t);
            _componentPageDescription = doc;
        }
    }


    private string GetComponentLink()
    {
        if (_component?.Type != null)
            return $"components/{_component?.Link}";
        return $"components/{_parentComponent?.Link}";
    }

    string GetTitle() => $"{Title}";

    string GetSubTitle()
    {
        if (string.IsNullOrEmpty(SubTitle))
            return "";
        return SubTitle.TrimEnd('.') + "";
    }

    string GetKeywords()
    {
        var keywords = new HashSet<string>(Regex.Split(Keywords ?? "", @",\s"));
        keywords.Add(Title);
        keywords.Add(_componentTypeName);
        keywords.Add(_componentTypeName?.Replace("Mud", ""));
        keywords.Add("mudblazor");
        keywords.Add("blazor");
        keywords.Add("component");
        keywords.Add("material design");
        keywords.Remove("");
        keywords.Remove(null);
        return string.Join(", ", keywords);
    }
}