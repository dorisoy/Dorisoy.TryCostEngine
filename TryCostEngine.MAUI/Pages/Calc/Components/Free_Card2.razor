@using FluentValidation
@using CostEngine.Data.Models
@using GEnum = CostEngine.Data.Constants.TPDataConstant
@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using CostEngine.Data.Constants
@using CostEngine.Util

@*促销用酒*@

<MudTable Items="@Items"
          Hover="true"
          Breakpoint="Breakpoint.None"
          Dense="@true"
          Elevation="1">
    <ColGroup>
        <col />
        <col style="width: 150px;" />
        <col style="width: 120px;" />
    </ColGroup>

    <HeaderContent>
        <MudTh Class="mud-all-table-header-row">产品</MudTh>
        <MudTh Class="mud-all-table-header-row">赠送量(件)</MudTh>
        <MudTh Style="text-align:center" Class="mud-all-table-header-row">操作</MudTh>
    </HeaderContent>

    <RowTemplate>

        @*产品*@
        <MudTd DataLabel="GoodNm" Class="pa-2 gap-2">
            <MudForm Model="@context">
                <MudAutocomplete @bind-Value="context.Select"
                                 Variant="Variant.Outlined"
                                 SearchFunc="@SearchrPoducts"
                                 Margin="Margin.Dense"
                                 ToStringFunc="@(e=> { return e?.Text; })"
                                 AdornmentIcon="@Icons.Material.Filled.Search"
                                 AdornmentColor="Color.Primary" />
            </MudForm>
        </MudTd>

        @*赠送量(件)*@
        <MudTd Class="pa-2 gap-2" DataLabel="GiveAmount">
            <MudForm Model="@context">
                <MudNumericField @bind-Value="context.GiveAmount"
                                 Variant="Variant.Outlined"
                                 Margin="Margin.Dense"
                                 For="(() => context.GiveAmount)" />
            </MudForm>
        </MudTd>


        <MudTd Class="pa-2 gap-2 justify-center align-center">
            <MudForm Model="@context">
                <MudButtonGroup Variant="Variant.Filled">
                    <MudIconButton Icon="@Icons.Filled.Add"
                                   Color="Color.Primary"
                                   OnClick="AddGoodItem" />

                    <MudIconButton Icon="@Icons.Filled.Delete"
                                   Color="Color.Primary"
                                   OnClick="@(()=>RemoveGoodItem(context.GUID.ToString()))" />
                </MudButtonGroup>
            </MudForm>
        </MudTd>
    </RowTemplate>
</MudTable>


@code
{
    private bool resetValueOnEmptyText;
    private List<SelectListModel> products;

    [Parameter]
    public string Title { get; set; }

    [CascadingParameter(Name = "ParameterModel")]
    public ParameterModel ParameterModel { get; set; }

    [Parameter]
    public ProtocolBaseDetail PData { get; set; }= new();


    private List<ProtocolBaseGivegood> _items;
    [Parameter]
    public List<ProtocolBaseGivegood> Items
    {
        get { return _items; }
        set
        {
            if (!(_items?.Equals(value) ?? false))
            {
                _items = value;
            }
        }
    }

    private async Task<IEnumerable<SelectListModel>> SearchrPoducts(string value)
    {
        await Task.Delay(5);
        if (string.IsNullOrEmpty(value))
            return new SelectListModel[0];

        return products.Where(x => x.Text.Contains(value, StringComparison.InvariantCultureIgnoreCase)).ToList();
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (PData.GiveGood.Any())
            Items = PData.GiveGood;

        if (ParameterModel.Products.Any())
            products = ParameterModel.Products.ToList();
    }

    private void AddGoodItem()
    {
        var that = Items.First();
        var temp = CloneExtends.DeepCloneObject<ProtocolBaseGivegood>(that);
        Items.Add(temp);
    }

    private void RemoveGoodItem(string id)
    {
        if (Items.Count <= 1)
        {
            Snackbar.Add("已经是最后一项了!");
            return;
        }
        var find = Items.Where(s => s.GUID.ToString() == id).First();
        if (find != null)
            Items.Remove(find);
    }
}


