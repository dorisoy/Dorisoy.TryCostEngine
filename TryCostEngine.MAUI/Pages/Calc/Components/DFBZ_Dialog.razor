@using FluentValidation
@using CostEngine.Data.Models
@using GEnum = CostEngine.Data.Constants.TPDataConstant
@using MudBlazor
@using System.ComponentModel.DataAnnotations

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Calculate" Color="Color.Primary" Class="mr-3 mb-n1" />
            @this.MudDialog.Title
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTable Items="@MonthDatas"
                  Hover="true"
                  Breakpoint="Breakpoint.None"
                  Dense="@true"
                  Elevation="1">

            <ColGroup>
                <col />
                <col />
                <col style="width: 120px" />
            </ColGroup>

            <HeaderContent>
                <MudTh>投放月份</MudTh>
                <MudTh>@("投放"+TypeDes)</MudTh>
                <MudTh Style="text-align:center">操作</MudTh>
            </HeaderContent>

            <RowTemplate>

                <MudTd Class="pa-2 gap-2" DataLabel="Month">
                    <MudForm Model="@context">
                        <MudSelect T="string"
                                   @bind-Value="context.Month"
                                   For="(() => context.Month)"
                                   AnchorOrigin="Origin.BottomCenter"
                                   Variant="Variant.Outlined"
                                   Margin="Margin.Dense"
                                   >
                            <MudSelectItem T="string" Value="@("2022-07")" />
                            <MudSelectItem T="string" Value="@("2022-08")" />
                            <MudSelectItem T="string" Value="@("2022-09")" />
                        </MudSelect>
                    </MudForm>
                </MudTd>

                <MudTd Class="pa-2 gap-2" DataLabel="Count">
                    <MudForm Model="@context">
                        <MudTextField @bind-Value="context.Count"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      For="(() => context.Count)" />
                    </MudForm>
                </MudTd>

                <MudTd Class="pa-2 gap-2 justify-center align-center">
                    <MudForm Model="@context">
                        <MudButtonGroup Variant="Variant.Filled">
                            <MudIconButton Icon="@Icons.Filled.Add"
                                           Color="Color.Primary"
                                           OnClick="AddMonth" />

                            <MudIconButton Icon="@Icons.Filled.Delete"
                                           Color="Color.Primary"
                                           OnClick="@(()=>RemoveMonth(context.No))" />
                        </MudButtonGroup>
                    </MudForm>
                </MudTd>

            </RowTemplate>
        </MudTable>


    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="Cancel" Class="mb-4">取消</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit" Class="mr-4 mb-4">确定</MudButton>
    </DialogActions>
</MudDialog>

@code
{
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string CalcDes { get; set; }
    [Parameter] public string TypeDes { get; set; }

    private int cpxl { get; set; }
    private int dxbz { get; set; }

    private decimal _resultValue;
    public decimal resultValue
    {
        get { return cpxl * dxbz; }
        set { _resultValue = value; }
    }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();


    List<MonthData> MonthDatas = new List<MonthData>() 
    {
        new MonthData()
        {
            No = UtilHelpher.GenerateSerialNumber(0),
            Months = new List<string>() { "2022-07", "2022-08", "2022-09" },
            Count = 1
        }
    };

    public class MonthData
    {
        public string No { get; set; }
        public string Month { get; set; }
        public List<string> Months { get; set; }
        public int Count { get; set; }
    }

    private void AddMonth()
    {
        var gernum = UtilHelpher.GenerateSerialNumber(MonthDatas.Count);
        var temp = new MonthData()
            {
                No = gernum,
                Months = new List<string>() { "2022-07", "2022-08", "2022-09" },
                Count = 1
            };

        MonthDatas.Add(temp);
    }

    private void RemoveMonth(string gUID)
    {
        if (MonthDatas.Count <= 1) return;
        var find = MonthDatas.Where(s => s.No == gUID).First();
        if (find != null)
            MonthDatas.Remove(find);
    }
}